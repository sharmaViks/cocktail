{"version":3,"sources":["components/Cocktail/Cocktail.js","components/Cocktail/redux/actions.js","components/Cocktail/redux/index.js","components/Cocktail/CocktailContainer.js","components/Cocktail/redux/reducers.js","store.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","backgroundColor","formControl","margin","spacing","minWidth","paper","padding","color","palette","text","secondary","cocktailImage","maxWidth","height","cocktailCard","display","cocktailCard_responsive","Cocktail","all_cocktails","all_categories","all_glasses","all_ingredients","all_alcohols","applyFilters","handleSearch","classes","useState","width","setWidth","cocktails","setCocktails","categories","setCategories","ingredients","setIngredients","glasses","setGlasses","alcohols","setAlcohols","selected_category","setSelectedCategory","selected_glass","setSelectedGlass","selected_ingredient","setSelectedIngredient","selected_alcohol","setSelectedAlcohol","filterStr","setFilterStr","useEffect","window","innerHeight","returnFilterStr","str","type","value","indexOf","arr","split","arr2","charAt","join","length","className","Grid","container","item","xs","Typography","variant","FormControl","component","FormLabel","InputLabel","id","Select","labelId","onChange","e","target","MenuItem","map","category","key","strCategory","ingredient","strIngredient1","glass","strGlass","alcohol","strAlcoholic","Button","onClick","_filterStr","slice","style","marginLeft","TextField","label","marginRight","InputProps","startAdornment","InputAdornment","position","Search","md","sm","flexWrap","cocktail","idDrink","Paper","textAlign","src","strDrinkThumb","strDrink","strIngredient2","strIngredient3","strIngredient4","createActions","allCocktails","allCategories","allGlasses","allIngredients","allAlcohols","Types","Creators","API_URL","dispatch","url","URL","fetch","method","headers","Accept","then","res","json","data","drinks","catch","err","console","log","filterType","CocktailContainer","useDispatch","useSelector","state","get_cocktails","props","filters","event","searchText","INITIAL_STATE","HANDLERS","ALL_COCKTAILS","action","ALL_CATEGORIES","ALL_GLASSES","ALL_INGREDIENTS","ALL_ALCOHOLS","createReducer","cocktailApp","combineReducers","cocktailReducer","store","createStore","applyMiddleware","thunk","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.86730fb5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Search } from \"@material-ui/icons\";\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: \"#ededed\"\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 180,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    cocktailImage: {\r\n        maxWidth: \"100%\",\r\n        height: \"auto\"\r\n    },\r\n    cocktailCard: {\r\n        display: \"flex\",\r\n        padding: 10\r\n    },\r\n    cocktailCard_responsive: {\r\n        padding: 10\r\n    },\r\n    // filterCard: {\r\n    //     padding: 10,\r\n    // },\r\n    // filterCard_responsive: {\r\n    //     padding: 0\r\n    // }\r\n}));\r\n\r\nconst Cocktail = ({ all_cocktails, all_categories, all_glasses, all_ingredients, all_alcohols, applyFilters,handleSearch }) => {\r\n    const classes = useStyles();\r\n    const [width, setWidth] = useState(null);\r\n    const [cocktails, setCocktails] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    const [ingredients, setIngredients] = useState([]);\r\n    const [glasses, setGlasses] = useState([]);\r\n    const [alcohols, setAlcohols] = useState([]);\r\n    const [selected_category, setSelectedCategory] = useState(\"\");\r\n    const [selected_glass, setSelectedGlass] = useState(\"\");\r\n    const [selected_ingredient, setSelectedIngredient] = useState(\"\");\r\n    const [selected_alcohol, setSelectedAlcohol] = useState(\"\");\r\n    const [filterStr, setFilterStr] = useState(\"\");\r\n    //const [filters, setFilters] = useState(_filters);\r\n    //const [selectedFilters, setSelectedFilters] = useState([]);\r\n    let buttonSize = \"medium\";\r\n    let cocktailCard = classes.cocktailCard;\r\n    //let filterCard = classes.filterCard;\r\n\r\n    useEffect(() => {\r\n        if (all_cocktails) {\r\n            setCocktails(all_cocktails)\r\n        }\r\n    }, [all_cocktails]);\r\n\r\n    useEffect(() => {\r\n        if (all_categories) {\r\n            setCategories(all_categories)\r\n        }\r\n    }, [all_categories])\r\n\r\n    useEffect(() => {\r\n        if (all_glasses) {\r\n            setGlasses(all_glasses)\r\n        }\r\n    }, [all_glasses])\r\n\r\n    useEffect(() => {\r\n        if (all_ingredients) {\r\n            setIngredients(all_ingredients)\r\n        }\r\n    }, [all_ingredients])\r\n\r\n    useEffect(() => {\r\n        if (all_alcohols) {\r\n            setAlcohols(all_alcohols)\r\n        }\r\n    }, [all_alcohols])\r\n\r\n    useEffect(() => {\r\n        if (window) {\r\n            setWidth(window.innerHeight);\r\n        }\r\n    }, [])\r\n\r\n    if (width < 700) {\r\n        cocktailCard = classes.cocktailCard_responsive;\r\n    }\r\n\r\n    const returnFilterStr = (str, type, value) => {\r\n        if (str.indexOf(type) > -1) {\r\n            let arr = str.split(type);\r\n            if (arr[1].indexOf('&') > -1) {\r\n                let arr2 = arr[1].split(arr[1].charAt(arr[1].indexOf('&')));\r\n                arr2[0] = value;\r\n                str = arr[0] + type + arr2.join('&');\r\n            }\r\n            else {\r\n                arr[1] = value;\r\n                str = arr[0] + type + arr[1];\r\n            }\r\n        }\r\n        else {\r\n            str = str + (str.length > 0 ? \"&\" + type + value : type + value);\r\n        }\r\n        return str;\r\n\r\n    }\r\n\r\n    const handleApplyFilters = () => {\r\n        let _filterStr = filterStr.slice();\r\n        if (selected_category) {\r\n            _filterStr = returnFilterStr(_filterStr, 'c=', selected_category);\r\n        }\r\n        if (selected_ingredient) {\r\n            _filterStr = returnFilterStr(_filterStr, 'i=', selected_ingredient);\r\n        }\r\n        if (selected_glass) {\r\n            _filterStr = returnFilterStr(_filterStr, 'g=', selected_glass);\r\n        }\r\n        if (selected_alcohol) {\r\n            _filterStr = returnFilterStr(_filterStr, 'a=', selected_alcohol);\r\n        }\r\n        setFilterStr(_filterStr)\r\n        applyFilters(_filterStr);\r\n    }\r\n\r\n    const handleResetFilters = () => {\r\n        setSelectedCategory(\"\");\r\n        setSelectedGlass(\"\");\r\n        setSelectedIngredient('');\r\n        setSelectedAlcohol('');\r\n        setFilterStr('');\r\n        applyFilters(\"\");\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h4\">\r\n                        Cocktails\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                        <FormLabel component=\"legend\">Filters</FormLabel>\r\n                        <Grid container>\r\n                            <Grid item xs={3}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                                        Category\r\n                                        </InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-outlined-label\"\r\n                                        id=\"demo-simple-select-outlined\"\r\n                                        value={selected_category}\r\n                                        onChange={(e) => setSelectedCategory(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value=\"\">\r\n                                            <em>Select Category</em>\r\n                                        </MenuItem>\r\n                                        {categories.map(category => (\r\n                                            <MenuItem key={category.strCategory} value={category.strCategory}>{category.strCategory}</MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                                        Ingredient\r\n                                        </InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-outlined-label\"\r\n                                        id=\"demo-simple-select-outlined\"\r\n                                        value={selected_ingredient}\r\n                                        onChange={(e) => setSelectedIngredient(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value=\"\">\r\n                                            <em>Select Ingredient</em>\r\n                                        </MenuItem>\r\n                                        {ingredients.map(ingredient => (\r\n                                            <MenuItem key={ingredient.strIngredient1} value={ingredient.strIngredient1}>{ingredient.strIngredient1}</MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                                        Glass\r\n                                        </InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-outlined-label\"\r\n                                        id=\"demo-simple-select-outlined\"\r\n                                        value={selected_glass}\r\n                                        onChange={(e) => setSelectedGlass(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value=\"\">\r\n                                            <em>Select Glass</em>\r\n                                        </MenuItem>\r\n                                        {glasses.map(glass => (\r\n                                            <MenuItem key={glass.strGlass} value={glass.strGlass}>{glass.strGlass}</MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                                    <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                                        Alcoholic\r\n                                        </InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-outlined-label\"\r\n                                        id=\"demo-simple-select-outlined\"\r\n                                        value={selected_alcohol}\r\n                                        onChange={(e) => setSelectedAlcohol(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value=\"\">\r\n                                            <em>Select Alcoholic</em>\r\n                                        </MenuItem>\r\n                                        {alcohols.map(alcohol => (\r\n                                            <MenuItem key={alcohol.strAlcoholic} value={alcohol.strAlcoholic}>{alcohol.strAlcoholic}</MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={handleApplyFilters}>Apply Filters</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={handleResetFilters} style={{ marginLeft: 10 }}>Reset Filters</Button>\r\n                        </Grid>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        label={\"Search\"}\r\n                        style={{ marginRight: 10 }}\r\n                        onChange={handleSearch}\r\n                        InputProps={{\r\n                            startAdornment: (<InputAdornment position=\"start\">\r\n                                <Search />\r\n                            </InputAdornment>)\r\n                        }}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} >\r\n                    <Grid container style={{ display: 'flex' }} >\r\n                        <Grid item xs={12} md={12} sm={12} >\r\n                            <Grid container style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n                                {cocktails && cocktails.length > 0 && cocktails.map(cocktail => (\r\n                                    <Grid key={cocktail.idDrink} item md={3} xs={12} sm={6} className={cocktailCard}>\r\n                                        <Paper className={classes.paper}>\r\n                                            <div style={{ textAlign: 'center' }}>\r\n                                                <img src={cocktail.strDrinkThumb} className={classes.cocktailImage} />\r\n                                            </div>\r\n                                            <Typography variant=\"subtitle2\" style={{ padding: 10, color: '#002884' }}>\r\n                                                {cocktail.strDrink}\r\n                                            </Typography>\r\n                                            <Typography variant=\"subtitle2\" style={{ padding: 10 }} >\r\n                                                Ingredients:\r\n                                                    <ul>\r\n                                                    {cocktail.strIngredient1 && cocktail.strIngredient1.length > 0 && (\r\n                                                        <li style={{ color: '#757ce8' }}>{cocktail.strIngredient1}</li>\r\n                                                    )}\r\n                                                    {cocktail.strIngredient2 && cocktail.strIngredient2.length > 0 && (\r\n                                                        <li style={{ color: '#757ce8' }}>{cocktail.strIngredient2}</li>\r\n                                                    )}\r\n                                                    {cocktail.strIngredient3 && cocktail.strIngredient3.length > 0 && (\r\n                                                        <li style={{ color: '#757ce8' }}>{cocktail.strIngredient3}</li>\r\n                                                    )}\r\n                                                    {cocktail.strIngredient4 && cocktail.strIngredient4.length > 0 && (\r\n                                                        <li style={{ color: '#757ce8' }}>{cocktail.strIngredient4}</li>\r\n                                                    )}\r\n                                                </ul>\r\n                                            </Typography>\r\n                                            <Typography variant=\"subtitle2\" style={{ padding: 10 }}>\r\n                                                Glass: <span style={{ color: '#757ce8' }}>{cocktail.strGlass}</span>\r\n                                            </Typography>\r\n                                            <Typography variant=\"subtitle2\" style={{ padding: 10 }}>\r\n                                                Category: <span style={{ color: '#757ce8' }}>{cocktail.strCategory}</span>\r\n                                            </Typography>\r\n                                            <Typography variant=\"subtitle2\" style={{ padding: 10 }}>\r\n                                                Alcoholic/Non-Alcoholic: <span style={{ color: '#757ce8' }}>{cocktail.strAlcoholic}</span>\r\n                                            </Typography>\r\n                                        </Paper>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Cocktail;","import { createActions } from 'reduxsauce'\r\n \r\nconst { Types, Creators } = createActions({\r\n\tallCocktails:['allCocktails'],\r\n\tallCategories:['allCategories'],\r\n\tallGlasses:['allGlasses'],\r\n\tallIngredients:['allIngredients'],\r\n\tallAlcohols:['allAlcohols']\r\n}, {})\r\n\r\nexport {Types, Creators}","import { Creators } from './actions';\r\nconst allCocktails = Creators.allCocktails;\r\nconst allCategories = Creators.allCategories;\r\nconst allGlasses = Creators.allGlasses;\r\nconst allIngredients = Creators.allIngredients;\r\nconst allAlcohols = Creators.allAlcohols;\r\nconst API_URL = \"https://www.thecocktaildb.com/api/json/v1/1/\"\r\n\r\n\r\nconst get_cocktails = (type) => {\r\n\treturn dispatch => {\r\n\t\tlet url = new URL(API_URL);\r\n\t\turl += type;\r\n\t\treturn fetch(url, {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: \"application/json\"\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\tdispatch(allCocktails(data.drinks))\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t}\r\n\r\n};\r\n\r\nconst get_filters = (filterType) => {\r\n\treturn dispatch => {\r\n\t\tlet url = new URL(API_URL) + 'list.php';\r\n\t\tif (filterType == 'category') {\r\n\t\t\turl += '?c=list';\r\n\t\t}\r\n\t\telse if (filterType == 'glass') {\r\n\t\t\turl += '?g=list';\r\n\t\t}\r\n\t\telse if (filterType == 'ingredient') {\r\n\t\t\turl += '?i=list';\r\n\t\t}\r\n\t\telse if (filterType == 'alcohol') {\r\n\t\t\turl += '?a=list';\r\n\t\t}\r\n\r\n\t\treturn fetch(url, {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: \"application/json\"\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\tif (filterType == 'category') {\r\n\t\t\t\t\tdispatch(allCategories(data.drinks))\r\n\t\t\t\t}\r\n\t\t\t\telse if (filterType == 'glass') {\r\n\t\t\t\t\tdispatch(allGlasses(data.drinks))\r\n\t\t\t\t}\r\n\t\t\t\telse if (filterType == 'ingredient') {\r\n\t\t\t\t\tdispatch(allIngredients(data.drinks))\r\n\t\t\t\t}\r\n\t\t\t\telse if (filterType == 'alcohol') {\r\n\t\t\t\t\tdispatch(allAlcohols(data.drinks))\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t}\r\n\r\n};\r\n\r\nexport default { get_cocktails, get_filters }","import React, { useEffect } from 'react';\r\nimport Cocktail from './Cocktail';\r\nimport get_cocktails from './redux/index';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nconst CocktailContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const all_cocktails = useSelector(state => state.cocktail.allCocktails)\r\n    const all_categories = useSelector(state => state.cocktail.allCategories)\r\n    const all_glasses = useSelector(state => state.cocktail.allGlasses)\r\n    const all_ingredients = useSelector(state => state.cocktail.allIngredients)\r\n    const all_alcohols = useSelector(state => state.cocktail.allAlcohols)\r\n\r\n    useEffect(() => {\r\n        dispatch(get_cocktails.get_cocktails('search.php?f=a'));\r\n        dispatch(get_cocktails.get_filters('category'));\r\n        dispatch(get_cocktails.get_filters('glass'));\r\n        dispatch(get_cocktails.get_filters('ingredient'));\r\n        dispatch(get_cocktails.get_filters('alcohol'));\r\n    }, [])\r\n\r\n\r\n    const applyFilters = (filters) => {\r\n        if (filters.length > 0) {\r\n            dispatch(get_cocktails.get_cocktails('filter.php?' + filters));\r\n        }\r\n        else{\r\n            dispatch(get_cocktails.get_cocktails('search.php?f=a'));\r\n        }\r\n    }\r\n\r\n    const handleSearch =(event)=>{\r\n        let searchText = event.target.value;\r\n        if(searchText.length>0){\r\n            dispatch(get_cocktails.get_cocktails('search.php?s='+searchText));\r\n        }\r\n        else{\r\n            dispatch(get_cocktails.get_cocktails('search.php?f=a'));\r\n        }\r\n    }\r\n\r\n\r\n    const props = { all_cocktails, all_categories, all_glasses, all_ingredients, all_alcohols, applyFilters,handleSearch };\r\n    return <Cocktail {...props}\r\n    />\r\n}\r\n\r\nexport default CocktailContainer;","import { createReducer } from 'reduxsauce'\r\nimport { Types } from './actions'\r\n\r\nexport const INITIAL_STATE = { allCocktails: null }\r\n\r\nexport const allCocktails = (state = INITIAL_STATE, action) => {\r\n    return { ...state, allCocktails: action.allCocktails }\r\n}\r\nexport const allCategories = (state = INITIAL_STATE, action) => {\r\n    return { ...state, allCategories: action.allCategories }\r\n}\r\nexport const allGlasses = (state = INITIAL_STATE, action) => {\r\n    return { ...state, allGlasses: action.allGlasses }\r\n}\r\nexport const allIngredients = (state = INITIAL_STATE, action) => {\r\n    return { ...state, allIngredients: action.allIngredients }\r\n}\r\nexport const allAlcohols = (state = INITIAL_STATE, action) => {\r\n    return { ...state, allAlcohols: action.allAlcohols }\r\n}\r\n\r\nexport const HANDLERS = {\r\n\r\n    [Types.ALL_COCKTAILS]: allCocktails,\r\n    [Types.ALL_CATEGORIES]: allCategories,\r\n    [Types.ALL_GLASSES]: allGlasses,\r\n    [Types.ALL_INGREDIENTS]: allIngredients,\r\n    [Types.ALL_ALCOHOLS]: allAlcohols\r\n\r\n}\r\n\r\nexport default createReducer(INITIAL_STATE, HANDLERS)","import { combineReducers } from 'redux'\r\nimport { createStore, applyMiddleware  } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport cocktailReducer from './components/Cocktail/redux/reducers';\r\n\r\nconst cocktailApp = combineReducers({\r\n    cocktail:cocktailReducer\r\n})\r\n\r\n\r\nconst store = createStore(cocktailApp,(applyMiddleware(thunk)))\r\n\r\nexport default store","import React from 'react';\nimport CocktailContainer from './components/Cocktail/CocktailContainer';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <CocktailContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}